#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "medium.h"

// bitmap data of font, this is a 8x12 font centered in 8x16 (right shifted 2)
// sourced from https://github.com/lynniemagoo/oled-font-pack/blob/master/fonts/8x12/small-font-8x12.js
static const uint16_t fontData[FONT_NUM_CHARS_M][FONT_WIDTH_M] = {
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // space
    {0x0000, 0x0000, 0x0bd0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // !
    {0x0000, 0x0030, 0x0008, 0x0030, 0x0008, 0x0000, 0x0000, 0x0000}, // "
    {0x0240, 0x0f40, 0x02f0, 0x0f40, 0x02f0, 0x0240, 0x0000, 0x0000}, // #
    {0x0c60, 0x0890, 0x1ff8, 0x0910, 0x0630, 0x0000, 0x0000, 0x0000}, // $
    {0x0060, 0x0ca0, 0x0360, 0x06c0, 0x0930, 0x0600, 0x0000, 0x0000}, // %
    {0x0700, 0x08e0, 0x0bb0, 0x04e0, 0x0bc0, 0x0800, 0x0000, 0x0000}, // &
    {0x0020, 0x0018, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // '
    {0x0000, 0x0000, 0x0000, 0x07e0, 0x0810, 0x1008, 0x0000, 0x0000}, // (
    {0x0000, 0x1008, 0x0810, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000}, // )
    {0x0240, 0x0180, 0x07e0, 0x0180, 0x0240, 0x0000, 0x0000, 0x0000}, // *
    {0x0080, 0x0080, 0x07f0, 0x0080, 0x0080, 0x0000, 0x0000, 0x0000}, // +
    {0x2000, 0x1800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // 0,
    {0x0080, 0x0080, 0x0080, 0x0080, 0x0080, 0x0000, 0x0000, 0x0000}, // -
    {0x0000, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // .
    {0x1000, 0x0e00, 0x0180, 0x0070, 0x0008, 0x0000, 0x0000, 0x0000}, // /
    {0x07e0, 0x0810, 0x0810, 0x0810, 0x07e0, 0x0000, 0x0000, 0x0000}, // 0
    {0x0000, 0x0820, 0x0ff0, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000}, // 1
    {0x0c60, 0x0a10, 0x0910, 0x0890, 0x0860, 0x0000, 0x0000, 0x0000}, // 2
    {0x0420, 0x0810, 0x0890, 0x0890, 0x0760, 0x0000, 0x0000, 0x0000}, // 3
    {0x0100, 0x02c0, 0x0220, 0x0ff0, 0x0a00, 0x0000, 0x0000, 0x0000}, // 4
    {0x04f0, 0x0890, 0x0890, 0x0890, 0x0710, 0x0000, 0x0000, 0x0000}, // 5
    {0x07e0, 0x0890, 0x0890, 0x08b0, 0x0700, 0x0000, 0x0000, 0x0000}, // 6
    {0x0030, 0x0010, 0x0f90, 0x0070, 0x0010, 0x0000, 0x0000, 0x0000}, // 7
    {0x0760, 0x0890, 0x0890, 0x0890, 0x0760, 0x0000, 0x0000, 0x0000}, // 8
    {0x00e0, 0x0d10, 0x0910, 0x0910, 0x07e0, 0x0000, 0x0000, 0x0000}, // 9
    {0x0000, 0x0000, 0x0840, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // :
    {0x0000, 0x0000, 0x1880, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // ;
    {0x0000, 0x0080, 0x0140, 0x0220, 0x0410, 0x0808, 0x0000, 0x0000}, // <
    {0x0240, 0x0240, 0x0240, 0x0240, 0x0240, 0x0000, 0x0000, 0x0000}, // =
    {0x0000, 0x0808, 0x0410, 0x0220, 0x0140, 0x0080, 0x0000, 0x0000}, // >
    {0x0060, 0x0010, 0x0b10, 0x0090, 0x0060, 0x0000, 0x0000, 0x0000}, // ?
    {0x07e0, 0x0810, 0x0bb0, 0x0a50, 0x07e0, 0x0000, 0x0000, 0x0000}, // @
    {0x0800, 0x0fa0, 0x0270, 0x03c0, 0x0e00, 0x0800, 0x0000, 0x0000}, // A
    {0x0810, 0x0ff0, 0x0890, 0x0890, 0x0760, 0x0000, 0x0000, 0x0000}, // B
    {0x07e0, 0x0810, 0x0810, 0x0810, 0x0430, 0x0000, 0x0000, 0x0000}, // C
    {0x0810, 0x0ff0, 0x0810, 0x0810, 0x07e0, 0x0000, 0x0000, 0x0000}, // D
    {0x0810, 0x0ff0, 0x0890, 0x09d0, 0x0c30, 0x0000, 0x0000, 0x0000}, // E
    {0x0810, 0x0ff0, 0x0890, 0x01d0, 0x0030, 0x0000, 0x0000, 0x0000}, // F
    {0x03c0, 0x0420, 0x0810, 0x0910, 0x0730, 0x0100, 0x0000, 0x0000}, // G
    {0x0810, 0x0ff0, 0x0080, 0x0080, 0x0ff0, 0x0810, 0x0000, 0x0000}, // H
    {0x0810, 0x0810, 0x0ff0, 0x0810, 0x0810, 0x0000, 0x0000, 0x0000}, // I
    {0x1800, 0x1010, 0x1010, 0x0ff0, 0x0010, 0x0010, 0x0000, 0x0000}, // J
    {0x0810, 0x0ff0, 0x0890, 0x0340, 0x0c30, 0x0810, 0x0000, 0x0000}, // K
    {0x0810, 0x0ff0, 0x0810, 0x0800, 0x0800, 0x0c00, 0x0000, 0x0000}, // L
    {0x0ff0, 0x00f0, 0x0f00, 0x00f0, 0x0ff0, 0x0000, 0x0000, 0x0000}, // M
    {0x0810, 0x0ff0, 0x08c0, 0x0310, 0x0ff0, 0x0010, 0x0000, 0x0000}, // N
    {0x07e0, 0x0810, 0x0810, 0x0810, 0x07e0, 0x0000, 0x0000, 0x0000}, // O
    {0x0810, 0x0ff0, 0x0890, 0x0090, 0x0060, 0x0000, 0x0000, 0x0000}, // P
    {0x07e0, 0x0a10, 0x0a10, 0x1c10, 0x17e0, 0x0000, 0x0000, 0x0000}, // Q
    {0x0810, 0x0ff0, 0x0890, 0x0190, 0x0e60, 0x0800, 0x0000, 0x0000}, // R
    {0x0c60, 0x0890, 0x0890, 0x0910, 0x0630, 0x0000, 0x0000, 0x0000}, // S
    {0x0030, 0x0810, 0x0ff0, 0x0810, 0x0030, 0x0000, 0x0000, 0x0000}, // T
    {0x0010, 0x07f0, 0x0800, 0x0800, 0x07f0, 0x0010, 0x0000, 0x0000}, // U
    {0x0010, 0x01f0, 0x0e00, 0x0380, 0x0070, 0x0010, 0x0000, 0x0000}, // V
    {0x0070, 0x0fa0, 0x00f0, 0x0fa0, 0x0070, 0x0000, 0x0000, 0x0000}, // W
    {0x0810, 0x0e70, 0x0180, 0x0e70, 0x0810, 0x0000, 0x0000, 0x0000}, // X
    {0x0010, 0x0870, 0x0fa0, 0x0870, 0x0010, 0x0000, 0x0000, 0x0000}, // Y
    {0x0830, 0x0e10, 0x0990, 0x0870, 0x0c10, 0x0000, 0x0000, 0x0000}, // Z
    {0x0000, 0x0000, 0x1ff8, 0x1008, 0x1008, 0x0000, 0x0000, 0x0000}, // [
    {0x0000, 0x0038, 0x00c0, 0x0700, 0x0800, 0x0000, 0x0000, 0x0000}, // backslash
    {0x0000, 0x1008, 0x1008, 0x1ff8, 0x0000, 0x0000, 0x0000, 0x0000}, // ]
    {0x0000, 0x0010, 0x0008, 0x0010, 0x0000, 0x0000, 0x0000, 0x0000}, // ^
    {0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x0000, 0x0000}, // _
    {0x0000, 0x0000, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, // `
    {0x0000, 0x0500, 0x0a80, 0x0a80, 0x0f00, 0x0800, 0x0000, 0x0000}, // a
    {0x0010, 0x0ff0, 0x0880, 0x0880, 0x0700, 0x0000, 0x0000, 0x0000}, // b
    {0x0000, 0x0700, 0x0880, 0x0880, 0x0980, 0x0000, 0x0000, 0x0000}, // c
    {0x0000, 0x0700, 0x0880, 0x0890, 0x0ff0, 0x0800, 0x0000, 0x0000}, // d
    {0x0000, 0x0700, 0x0a80, 0x0a80, 0x0b00, 0x0000, 0x0000, 0x0000}, // e
    {0x0000, 0x0880, 0x0fe0, 0x0890, 0x0890, 0x0010, 0x0000, 0x0000}, // f
    {0x0000, 0x1d00, 0x2a80, 0x2a80, 0x2980, 0x1080, 0x0000, 0x0000}, // g
    {0x0810, 0x0ff0, 0x0880, 0x0080, 0x0f00, 0x0800, 0x0000, 0x0000}, // h
    {0x0000, 0x0880, 0x0f90, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000}, // i
    {0x2000, 0x2000, 0x2080, 0x1fc0, 0x0000, 0x0000, 0x0000, 0x0000}, // j
    {0x0810, 0x0ff0, 0x0a00, 0x0380, 0x0c80, 0x0880, 0x0000, 0x0000}, // k
    {0x0810, 0x0810, 0x0ff0, 0x0800, 0x0800, 0x0000, 0x0000, 0x0000}, // l
    {0x0f80, 0x0080, 0x0f80, 0x0080, 0x0f00, 0x0000, 0x0000, 0x0000}, // m
    {0x0880, 0x0f80, 0x0880, 0x0080, 0x0f00, 0x0800, 0x0000, 0x0000}, // n
    {0x0000, 0x0700, 0x0880, 0x0880, 0x0700, 0x0000, 0x0000, 0x0000}, // o
    {0x2080, 0x3f80, 0x2880, 0x0880, 0x0700, 0x0000, 0x0000, 0x0000}, // p
    {0x0000, 0x0700, 0x0880, 0x2880, 0x3f80, 0x2000, 0x0000, 0x0000}, // q
    {0x0880, 0x0f80, 0x0900, 0x0080, 0x0080, 0x0000, 0x0000, 0x0000}, // r
    {0x0000, 0x0980, 0x0a80, 0x0a80, 0x0cc0, 0x0000, 0x0000, 0x0000}, // s
    {0x0000, 0x0080, 0x07e0, 0x0880, 0x0800, 0x0000, 0x0000, 0x0000}, // t
    {0x0080, 0x0780, 0x0800, 0x0880, 0x0f80, 0x0800, 0x0000, 0x0000}, // u
    {0x0080, 0x0380, 0x0c80, 0x0600, 0x0180, 0x0080, 0x0000, 0x0000}, // v
    {0x0180, 0x0e00, 0x0380, 0x0e00, 0x0180, 0x0000, 0x0000, 0x0000}, // w
    {0x0880, 0x0d80, 0x0200, 0x0d80, 0x0880, 0x0000, 0x0000, 0x0000}, // x
    {0x2080, 0x2380, 0x1cc0, 0x0600, 0x0180, 0x0080, 0x0000, 0x0000}, // y
    {0x0000, 0x0880, 0x0ea0, 0x0980, 0x0880, 0x0000, 0x0000, 0x0000}, // z
    {0x0000, 0x0000, 0x0080, 0x1f78, 0x1008, 0x0000, 0x0000, 0x0000}, // {
    {0x0000, 0x0000, 0x0000, 0x3ffc, 0x0000, 0x0000, 0x0000, 0x0000}, // |
    {0x0000, 0x1008, 0x1f78, 0x0080, 0x0000, 0x0000, 0x0000, 0x0000}, // ,
    {0x0008, 0x0004, 0x0008, 0x0010, 0x0010, 0x0008, 0x0000, 0x0000}, // ~
    {0x0000, 0x0000, 0x0000, 0x0800, 0x0000, 0x0800, 0x0000, 0x0800}  // special ...
};

// Return pointer to bitmap for character c, or NULL if unsupported
const uint16_t *getCharBitmapM(char c)
{
  if (c < ' ' || c > '\177')
    return NULL;

  return fontData[c - ' '];
}
